import 'package:flutter/material.dart';
import 'dart:async';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stopwatch and Timer',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: StopWatchTimerScreen(),
    );
  }
}

class StopWatchTimerScreen extends StatefulWidget {
  @override
  _StopWatchTimerScreenState createState() => _StopWatchTimerScreenState();
}

class _StopWatchTimerScreenState extends State<StopWatchTimerScreen> {
  // Stopwatch variables
  Stopwatch _stopwatch = Stopwatch();
  String _elapsedTime = "00:00:00";
  late Timer _stopwatchTimer;

  // Timer variables
  final TextEditingController _timerController = TextEditingController();
  int _remainingTime = 0;
  String _timerDisplay = "00:00";

  // Stopwatch start function
  void _startStopwatch() {
    _stopwatch.start();
    _stopwatchTimer = Timer.periodic(Duration(seconds: 1), (timer) {
      setState(() {
        _elapsedTime = _formatTime(_stopwatch.elapsedMilliseconds);
      });
    });
  }

  // Stopwatch stop function
  void _stopStopwatch() {
    _stopwatch.stop();
    _stopwatchTimer.cancel();
  }

  // Stopwatch reset function
  void _resetStopwatch() {
    _stopwatch.reset();
    setState(() {
      _elapsedTime = "00:00:00";
    });
  }

  // Timer start function
  void _startTimer() {
    final timeInSeconds = int.tryParse(_timerController.text) ?? 0;
    if (timeInSeconds > 0) {
      setState(() {
        _remainingTime = timeInSeconds;
        _timerDisplay = _formatTime(_remainingTime * 1000);
      });

      Timer.periodic(Duration(seconds: 1), (timer) {
        if (_remainingTime == 0) {
          timer.cancel();
        } else {
          setState(() {
            _remainingTime--;
            _timerDisplay = _formatTime(_remainingTime * 1000);
          });
        }
      });
    }
  }

  // Timer reset function
  void _resetTimer() {
    setState(() {
      _remainingTime = 0;
      _timerDisplay = "00:00";
    });
  }

  // Helper function to format time
  String _formatTime(int milliseconds) {
    int seconds = (milliseconds / 1000).floor();
    int minutes = (seconds / 60).floor();
    seconds = seconds % 60;
    return '${_twoDigits(minutes)}:${_twoDigits(seconds)}';
  }

  // Helper function to ensure two-digit formatting
  String _twoDigits(int n) => n.toString().padLeft(2, '0');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Stopwatch and Timer'),
      ),
      body: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // Stopwatch Section
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Text(
                'Stopwatch',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ),
            Text(
              _elapsedTime,
              style: TextStyle(fontSize: 48, fontWeight: FontWeight.bold),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: () {
                    if (!_stopwatch.isRunning) {
                      _startStopwatch();
                    }
                  },
                  child: Text('Start'),
                ),
                SizedBox(width: 20),
                ElevatedButton(
                  onPressed: () {
                    if (_stopwatch.isRunning) {
                      _stopStopwatch();
                    }
                  },
                  child: Text('Stop'),
                ),
                SizedBox(width: 20),
                ElevatedButton(
                  onPressed: _resetStopwatch,
                  child: Text('Reset'),
                ),
              ],
            ),

            // Timer Section
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: Text(
                'Timer (Enter in seconds)',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
            ),
            Text(
              _timerDisplay,
              style: TextStyle(fontSize: 48, fontWeight: FontWeight.bold),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20.0),
              child: TextField(
                controller: _timerController,
                keyboardType: TextInputType.number,
                decoration: InputDecoration(
                  labelText: 'Enter Time (in seconds)',
                  border: OutlineInputBorder(),
                ),
              ),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton(
                  onPressed: _startTimer,
                  child: Text('Start Timer'),
                ),
                SizedBox(width: 20),
                ElevatedButton(
                  onPressed: _resetTimer,
                  child: Text('Reset Timer'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
